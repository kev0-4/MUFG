{
  "info": {
    "name": "FinGuard Analytics Server Updated",
    "_postman_id": "7d4f2a8c-9e5b-4f1a-8b3e-3c8a7f6b2d9f",
    "description": "Postman collection for testing FinGuard AI Analytics Server (port 8002) with Financial Server integration for MUFG Gen AI Hack '25. Includes updated endpoints from main.py.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get User Data",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"user_id\": \"uid1\"}"
        },
        "url": {
          "raw": "{{ANALYTICS_SERVER_URL}}/analytics/user-data",
          "host": ["{{ANALYTICS_SERVER_URL}}"],
          "path": ["analytics", "user-data"]
        },
        "description": "Fetches user data (super_balance, stock_holdings with historical_data) for uid1 from Financial Server."
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user_id\": \"uid1\"}"
            },
            "url": {
              "raw": "{{ANALYTICS_SERVER_URL}}/analytics/user-data",
              "host": ["{{ANALYTICS_SERVER_URL}}"],
              "path": ["analytics", "user-data"]
            }
          },
          "status": "OK",
          "code": 200,
          "body": "{\"user_id\": \"uid1\", \"super_balance\": 11100.0, \"stock_holdings\": [{\"stock\": \"BHP.AX\", \"quantity\": 100, \"currentPrice\": 27.5, \"historical_data\": [{\"ds\": \"2025-08-19T00:00:00.000Z\", \"y\": 27.5}]}]}"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response has user_id, super_balance, stock_holdings', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('user_id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('super_balance').that.is.a('number');",
              "    pm.expect(jsonData).to.have.property('stock_holdings').that.is.an('array');",
              "    if (jsonData.stock_holdings.length > 0) {",
              "        pm.expect(jsonData.stock_holdings[0]).to.have.property('stock').that.is.a('string');",
              "        pm.expect(jsonData.stock_holdings[0]).to.have.property('quantity').that.is.a('number');",
              "        pm.expect(jsonData.stock_holdings[0]).to.have.property('currentPrice').that.is.a('number');",
              "        pm.expect(jsonData.stock_holdings[0]).to.have.property('historical_data').that.is.an('array');",
              "    }",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Simulate Superannuation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"simulation_data\": {\"contribution\": 20000, \"frequency\": \"quarterly\", \"timeframe\": 10, \"economic_conditions\": {\"inflation\": 0.03}}, \"user_id\": \"uid1\"}"
        },
        "url": {
          "raw": "{{ANALYTICS_SERVER_URL}}/analytics/simulate",
          "host": ["{{ANALYTICS_SERVER_URL}}"],
          "path": ["analytics", "simulate"]
        },
        "description": "Simulates superannuation projections for uid1 with quarterly contributions over 10 years."
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"simulation_data\": {\"contribution\": 20000, \"frequency\": \"quarterly\", \"timeframe\": 10, \"economic_conditions\": {\"inflation\": 0.03}}, \"user_id\": \"uid1\"}"
            },
            "url": {
              "raw": "{{ANALYTICS_SERVER_URL}}/analytics/simulate",
              "host": ["{{ANALYTICS_SERVER_URL}}"],
              "path": ["analytics", "simulate"]
            }
          },
          "status": "OK",
          "code": 200,
          "body": "{\"projected_balance\": 150000.00, \"forecast\": {\"dates\": [\"2025-08-19\"], \"values\": [11100.00]}, \"eli5_response\": \"Your savings will grow like a steady savings account.\"}"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response has projected_balance, forecast, eli5_response', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('projected_balance').that.is.a('number');",
              "    pm.expect(jsonData).to.have.property('forecast').that.is.an('object');",
              "    pm.expect(jsonData.forecast).to.have.property('dates').that.is.an('array');",
              "    pm.expect(jsonData.forecast).to.have.property('values').that.is.an('array');",
              "    pm.expect(jsonData).to.have.property('eli5_response').that.is.a('string');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Recommend Strategy",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"user_id\": \"uid1\", \"scenario\": \"recession\"}"
        },
        "url": {
          "raw": "{{ANALYTICS_SERVER_URL}}/analytics/recommend",
          "host": ["{{ANALYTICS_SERVER_URL}}"],
          "path": ["analytics", "recommend"]
        },
        "description": "Recommends investment strategy for uid1 in a recession scenario."
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user_id\": \"uid1\", \"scenario\": \"recession\"}"
            },
            "url": {
              "raw": "{{ANALYTICS_SERVER_URL}}/analytics/recommend",
              "host": ["{{ANALYTICS_SERVER_URL}}"],
              "path": ["analytics", "recommend"]
            }
          },
          "status": "OK",
          "code": 200,
          "body": "{\"user_id\": \"uid1\", \"recommended_strategy\": \"Conservative\", \"portfolio_return\": 0.05, \"stocks\": [\"BHP.AX\"]}"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response has user_id, recommended_strategy, portfolio_return, stocks', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('user_id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('recommended_strategy').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('portfolio_return').that.is.a('number');",
              "    pm.expect(jsonData).to.have.property('stocks').that.is.an('array');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Calibrate Risk",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"user_id\": \"uid1\", \"scenario\": \"recession\", \"economic_conditions\": {\"inflation\": 0.03}}"
        },
        "url": {
          "raw": "{{ANALYTICS_SERVER_URL}}/analytics/risk",
          "host": ["{{ANALYTICS_SERVER_URL}}"],
          "path": ["analytics", "risk"]
        },
        "description": "Calibrates risk for uid1 in a recession scenario with inflation."
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user_id\": \"uid1\", \"scenario\": \"recession\", \"economic_conditions\": {\"inflation\": 0.03}}"
            },
            "url": {
              "raw": "{{ANALYTICS_SERVER_URL}}/analytics/risk",
              "host": ["{{ANALYTICS_SERVER_URL}}"],
              "path": ["analytics", "risk"]
            }
          },
          "status": "OK",
          "code": 200,
          "body": "{\"user_id\": \"uid1\", \"risk_level\": \"conservative\", \"adjusted_return\": 0.033, \"portfolio_volatility\": 0.1}"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response has user_id, risk_level, adjusted_return, portfolio_volatility', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('user_id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('risk_level').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('adjusted_return').that.is.a('number');",
              "    pm.expect(jsonData).to.have.property('portfolio_volatility').that.is.a('number');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Scenario Simulation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"user_id\": \"uid1\", \"scenario\": \"recession\", \"monte_carlo_params\": {\"iterations\": 1000, \"timeframe\": 10, \"volatility\": 0.1}, \"economic_conditions\": {\"inflation\": 0.03}}"
        },
        "url": {
          "raw": "{{ANALYTICS_SERVER_URL}}/analytics/scenario",
          "host": ["{{ANALYTICS_SERVER_URL}}"],
          "path": ["analytics", "scenario"]
        },
        "description": "Runs Monte Carlo simulation for uid1 in a recession scenario with NLP sentiments."
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user_id\": \"uid1\", \"scenario\": \"recession\", \"monte_carlo_params\": {\"iterations\": 1000, \"timeframe\": 10, \"volatility\": 0.1}, \"economic_conditions\": {\"inflation\": 0.03}}"
            },
            "url": {
              "raw": "{{ANALYTICS_SERVER_URL}}/analytics/scenario",
              "host": ["{{ANALYTICS_SERVER_URL}}"],
              "path": ["analytics", "scenario"]
            }
          },
          "status": "OK",
          "code": 200,
          "body": "{\"simulated_balance\": 120000.00, \"confidence_interval\": [100000.00, 140000.00], \"stock_sentiments\": {\"BHP.AX\": {\"sentiment\": \"positive\", \"confidence\": 0.85}}, \"eli5_response\": \"Your portfolio will grow like a tree in fertile soil.\"}"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response has simulated_balance, confidence_interval, stock_sentiments, eli5_response', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('simulated_balance').that.is.a('number');",
              "    pm.expect(jsonData).to.have.property('confidence_interval').that.is.an('array').of.length(2);",
              "    pm.expect(jsonData).to.have.property('stock_sentiments').that.is.an('object');",
              "    pm.expect(jsonData).to.have.property('eli5_response').that.is.a('string');",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "ANALYTICS_SERVER_URL",
      "value": "http://localhost:8002",
      "description": "AI Analytics Server URL (port 8002)"
    },
    {
      "key": "FINANCIAL_SERVER_URL",
      "value": "http://financial-server:8080",
      "description": "Financial Server URL"
    },
    {
      "key": "NLP_SERVER_URL",
      "value": "http://nlp-server:8000",
      "description": "NLP Server URL"
    }
  ]
}
